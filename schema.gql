schema {
  query: Queries
  mutation: Mutations
}

scalar Date

enum SortType {
  DateAdded
  Title
  Author
  Rating
}

enum PortType {
  Finito
  Goodreads
}

input BookInput {
  title: String!
  authors: [String!]!
  description: String!
  isbn: String!
  thumbnailUri: String!
}

input MontageInput {
  columns: Int! = 6
  largeImageWidth: Int! = 128
  largeImageHeight: Int! = 196
  largeImgScaleFactor: Int! = 2
  largeImageRatingThreshold: Int! = 5
}

type Sort {
  type: SortType!
  sortAscending: Boolean!
}

type UserBook {
  title: String!
  authors: [String!]!
  description: String!
  isbn: String!
  thumbnailUri: String!
  dateAdded: Date
  rating: Int
  startedReading: Date
  lastRead: Date
}

type Collection {
  name: String!
  books: [UserBook!]!
  preferredSort: Sort!
}

type Summary {
  read: Int!
  added: Int!
  averageRating: Float!
  montage: String!
}

type Queries {
  """
  Search for books matching the specified parameters.  langRestrict should be
  a two-letter ISO-639-1 code, such as "en" or "fr".
  """
  books(
    titleKeywords: String,
    authorKeywords: String,
    maxResults: Int = 10,
    langRestrict: String = "en"
  ): [UserBook!]!
  book(isbn: String!, langRestrict: String = "en"): [UserBook!]!
  series(book: BookInput!): [UserBook!]!
  collections: [Collection!]!
  collection(name: String!): Collection!
  export(collection: String!, exportType: PortType!): String!
  summary(from: Date, to: Date, montageInput: MontageInput): Summary!
}

type Mutations {  createCollection(name: String!, books: [BookInput!]): Collection!
  """
  Delete a collection, will error if the collection does not exist.
  """
  deleteCollection(name: String!): Boolean
  updateCollection(
    currentName: String!,
    newName: String,
    preferredSortType: SortType,
    sortAscending: Boolean
  ): Collection!
  addBook(collection: String, book: BookInput!): Collection!
  removeBook(collection: String!, isbn: String!): Boolean
  startReading(book: BookInput!, date: Date): UserBook!
  finishReading(book: BookInput!, date: Date): UserBook!
  rateBook(book: BookInput!, rating: Int!): UserBook!
  """
  Create a custom book, useful for when you can't find a book when searching.
  """
  createBook(book: BookInput!): UserBook!
  """
  Deletes all data held about a book, is nop if no data is held about the book.
  """
  deleteBookData(isbn: String!): Boolean
  import(collection: String!, importType: PortType!): Collection!
}
