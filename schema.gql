schema {
  query: Queries
  mutation: Mutations
}

scalar Date

enum Sort {
  DateAdded
  Title
  Author
  Rating
}

input BookInput {
  title: String!
  authors: [String!]!
  description: String!
  isbn: String!
  thumbnailUri: String!
}

type UserBook {
  title: String!
  authors: [String!]!
  description: String!
  isbn: String!
  thumbnailUri: String!
  rating: Int
  startedReading: Date
  lastRead: Date
}

type Collection {
  name: String!
  books: [UserBook!]!
  preferredSort: Sort!
}

type Queries {
  books(
    titleKeywords: String,
    authorKeywords: String,
    maxResults: Int = 10,
    langRestrict: String = "en"
  ): [UserBook!]!
  book(isbn: String!, langRestrict: String = "en"): UserBook!
  collections: [Collection!]!
  collection(name: String!): Collection!
}

type Mutations {
  createCollection(name: String!, books: [BookInput!]): Collection!
  """
  Delete a collection, will error if the collection does not exist.
  """
  deleteCollection(name: String!): Boolean
  updateCollection(
    currentName: String!, newName: String, preferredSort: Sort
  ): Collection!
  addBook(collection: String, book: BookInput!): Collection!
  removeBook(collection: String!, isbn: String!): Boolean
  startReading(book: BookInput!, date: Date): UserBook!
  finishReading(book: BookInput!, date: Date): UserBook!
  rateBook(book: BookInput!, rating: Int!): UserBook!
  """
  Create a custom book, useful for when you can't find a book when searching.
  """
  createBook(book: BookInput!): UserBook!
  """
  Deletes all data held about a book, is nop if no data is held about the book.
  """
  deleteBookData(isbn: String!): Boolean
}
