scalar Date

enum SortType {
  DateAdded
  LastRead
  Title
  Author
  Rating
}

enum PortType {
  Finito
  Goodreads
}

input BookInput {
  title: String!
  authors: [String!]!
  description: String!
  isbn: String!
  thumbnailUri: String!
}

input MontageInput {
  columns: Int! = 6
  largeImageWidth: Int! = 128
  largeImageHeight: Int! = 196
  largeImgScaleFactor: Int! = 2
  largeImageRatingThreshold: Int! = 5
}

input PaginationInput {
  first: Int! = 15
  after: Int! = 0
}

type PageInfo {
  totalBooks: Int!
}

type Sort {
  type: SortType!
  sortAscending: Boolean!
}

type UserBook {
  title: String!
  authors: [String!]!
  description: String!
  isbn: String!
  thumbnailUri: String!
  dateAdded: Date
  rating: Int
  startedReading: Date
  lastRead: Date
  review: String
}

type Collection {
  name: String!
  books: [UserBook!]!
  preferredSort: Sort!
  pageInfo: PageInfo
}

type Summary {
  read: Int!
  added: Int!
  averageRating: Float!
  montage: String!
}

type ImportResult {
  successful: [UserBook!]!
  partiallySuccessful: [UserBook!]!
  unsuccessful: [UserBook!]!
}


type Query {
  """
  Search for books matching the specified parameters.  langRestrict should be
  a two-letter ISO-639-1 code, such as "en" or "fr".
  """
  books(
    titleKeywords: String,
    authorKeywords: String,
    maxResults: Int = 10,
    langRestrict: String = "en"
  ): [UserBook!]!
  book(isbn: String!, langRestrict: String = "en"): [UserBook!]!
  series(book: BookInput!): [UserBook!]!
  collections: [Collection!]!
  collection(name: String!, booksPagination: PaginationInput): Collection!
  export(exportType: PortType!, collection: String): String!
  summary(
    from: Date,
    to: Date,
    montageInput: MontageInput,
    includeAdded: Boolean! = true
  ): Summary!
}

type Mutation {
  createCollection(
    name: String!,
    books: [BookInput!],
    preferredSortType: SortType,
    sortAscending: Boolean
  ): Collection!
  """
  Delete a collection, will error if the collection does not exist.
  """
  deleteCollection(name: String!): Boolean
  updateCollection(
    currentName: String!,
    newName: String,
    preferredSortType: SortType,
    sortAscending: Boolean
  ): Collection!
  addBook(collection: String, book: BookInput!): Collection!
  removeBook(collection: String!, isbn: String!): Boolean
  startReading(book: BookInput!, date: Date): UserBook!
  finishReading(book: BookInput!, date: Date): UserBook!
  rateBook(book: BookInput!, rating: Int!): UserBook!
  addBookReview(book: BookInput!, review: String!): UserBook!
  """
  Create a custom book, useful for when you can't find a book when searching.
  """
  createBook(book: BookInput!): UserBook!
  """
  Deletes all data held about a book, is nop if no data is held about the book.
  """
  deleteBookData(isbn: String!): Boolean
  """
  Import books from a given resource.  How books are added to collections is
  determined by the port type.

  For Goodreads, bookshelves will be assumed to correspond to collections, and
  will be created if they do not exist.
  """
  import(importType: PortType!, content: String!, langRestrict: String = "en"): ImportResult!
}
